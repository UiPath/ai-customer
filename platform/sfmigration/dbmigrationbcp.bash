#!/bin/bash

function update_database_table(){

  TableName=$1
  SRC_SERVER=$2
  SRC_DB_NAME=$3
  SRC_DB_SCHEMA=$4
  SRC_DB_USERNAME=$5
  SRC_DB_PASSWORD=$6
  DESTINATION_SERVER=$7
  DESTINATION_DB_NAME=$8
  DESTINATION_DB_SCHEMA=$9
  DESTINATION_DB_USERNAME=${10}
  DESTINATION_DB_PASSWORD=${11}
  SRC_TENANT_ID=${12}
  DESTINATION_TENANT_ID=${13}
  DESTINATION_ACCOUNT_ID=${14}
  
echo "SRC_SERVER = $SRC_SERVER"
echo "SRC_DB_NAME = $SRC_DB_NAME"
echo "SRC_DB_SCHEMA = $SRC_DB_SCHEMA"
echo "SRC_DB_USERNAME = $SRC_DB_USERNAME"
echo "SRC_DB_PASSWORD = $SRC_DB_PASSWORD"
echo "DESTINATION_SERVER = $DESTINATION_SERVER"
echo "DESTINATION_DB_NAME = $DESTINATION_DB_NAME"
echo "DESTINATION_DB_SCHEMA = $DESTINATION_DB_SCHEMA"
echo "DESTINATION_DB_USERNAME = $DESTINATION_DB_USERNAME"
echo "DESTINATION_DB_PASSWORD = $DESTINATION_DB_PASSWORD"
echo "SRC_TENANT_ID = $SRC_TENANT_ID"
echo "DESTINATION_TENANT_ID = $DESTINATION_TENANT_ID"
echo "DESTINATION_ACCOUNT_ID = $DESTINATION_ACCOUNT_ID"
    
echo ""
echo "*************************************************************************"

echo $TableName " Migration started"

#BCP [$SRC_DB_NAME].[$SRC_DB_SCHEMA].[$TableName] format nul -n -S $SRC_SERVER  -U $SRC_DB_USERNAME -P $SRC_DB_PASSWORD -f $TableName.fmt 

BCP "SELECT * FROM ["$SRC_DB_SCHEMA"].["$TableName"] where tenant_id = '"$SRC_TENANT_ID"'" queryout $TableName.dat -n -S $SRC_SERVER  -U $SRC_DB_USERNAME -P $SRC_DB_PASSWORD -d $SRC_DB_NAME

echo $TableName " Export Done"

BCP [$DESTINATION_DB_NAME].[$DESTINATION_DB_SCHEMA].[$TableName] in $TableName.dat -n -S $DESTINATION_SERVER -U $DESTINATION_DB_USERNAME -P $DESTINATION_DB_PASSWORD -f $TableName.fmt

echo $TableName " Import Done"

echo "*************************************************************************"


# update tenant id in the destination database

sqlcmd -S $DESTINATION_SERVER -U $DESTINATION_DB_USERNAME -P $DESTINATION_DB_PASSWORD -d $DESTINATION_DB_NAME -Q "update "$DESTINATION_DB_SCHEMA"."$TableName" set tenant_id = '"$DESTINATION_TENANT_ID"' , account_id = '"$DESTINATION_ACCOUNT_ID"' where tenant_id = '"$SRC_TENANT_ID"';"


}

# Table names to be migrated

export CREDENTIALS_FILE=$1

export SRC_TENANT_ID=$2

export DESTINATION_TENANT_ID=$3

export DESTINATION_ACCOUNT_ID=$4

PkgManagerDBTableNames=( projects ml_packages ml_package_versions)
TrainerDBTableNames=( datasets)

export SRC_SERVER=$(cat $CREDENTIALS_FILE | jq -r 'select(.SRC_SERVER != null) | .SRC_SERVER')

export SRC_PKGMANAGER_DB_NAME=$(cat $CREDENTIALS_FILE | jq -r 'select(.SRC_PKGMANAGER_DB_NAME != null) | .SRC_PKGMANAGER_DB_NAME')

export SRC_PKGMANAGER_DB_SCHEMA=$(cat $CREDENTIALS_FILE | jq -r 'select(.SRC_PKGMANAGER_DB_SCHEMA != null) | .SRC_PKGMANAGER_DB_SCHEMA')

export SRC_PKGMANAGER_DB_USERNAME=$(cat $CREDENTIALS_FILE | jq -r 'select(.SRC_PKGMANAGER_DB_USERNAME != null) | .SRC_PKGMANAGER_DB_USERNAME')

export SRC_PKGMANAGER_DB_PASSWORD=$(cat $CREDENTIALS_FILE | jq -r 'select(.SRC_PKGMANAGER_DB_PASSWORD != null) | .SRC_PKGMANAGER_DB_PASSWORD')

export SRC_TRAINER_DB_NAME=$(cat $CREDENTIALS_FILE | jq -r 'select(.SRC_TRAINER_DB_NAME != null) | .SRC_TRAINER_DB_NAME')

export SRC_TRAINER_DB_SCHEMA=$(cat $CREDENTIALS_FILE | jq -r 'select(.SRC_TRAINER_DB_SCHEMA != null) | .SRC_TRAINER_DB_SCHEMA')

export SRC_TRAINER_DB_USERNAME=$(cat $CREDENTIALS_FILE | jq -r 'select(.SRC_TRAINER_DB_USERNAME != null) | .SRC_TRAINER_DB_USERNAME')

export SRC_TRAINER_DB_PASSWORD=$(cat $CREDENTIALS_FILE | jq -r 'select(.SRC_TRAINER_DB_PASSWORD != null) | .SRC_TRAINER_DB_PASSWORD')

export DESTINATION_SERVER=$(cat $CREDENTIALS_FILE | jq -r 'select(.DESTINATION_SERVER != null) | .DESTINATION_SERVER')

export DESTINATION_DB_NAME=$(cat $CREDENTIALS_FILE | jq -r 'select(.DESTINATION_DB_NAME != null) | .DESTINATION_DB_NAME')

export DESTINATION_PKGMANAGER_DB_SCHEMA=$(cat $CREDENTIALS_FILE | jq -r 'select(.DESTINATION_PKGMANAGER_DB_SCHEMA != null) | .DESTINATION_PKGMANAGER_DB_SCHEMA')

export DESTINATION_TRAINER_DB_SCHEMA=$(cat $CREDENTIALS_FILE | jq -r 'select(.DESTINATION_TRAINER_DB_SCHEMA != null) | .DESTINATION_TRAINER_DB_SCHEMA')

export DESTINATION_DB_USERNAME=$(cat $CREDENTIALS_FILE | jq -r 'select(.DESTINATION_DB_USERNAME != null) | .DESTINATION_DB_USERNAME')

export DESTINATION_DB_PASSWORD=$(cat $CREDENTIALS_FILE | jq -r 'select(.DESTINATION_DB_PASSWORD != null) | .DESTINATION_DB_PASSWORD')


# Updating all the table for ai_pkgmanager db
for TableName in ${PkgManagerDBTableNames[*]} 
do
update_database_table  $TableName $SRC_SERVER $SRC_PKGMANAGER_DB_NAME $SRC_PKGMANAGER_DB_SCHEMA $SRC_PKGMANAGER_DB_USERNAME $SRC_PKGMANAGER_DB_PASSWORD $DESTINATION_SERVER $DESTINATION_DB_NAME $DESTINATION_PKGMANAGER_DB_SCHEMA $DESTINATION_DB_USERNAME $DESTINATION_DB_PASSWORD $SRC_TENANT_ID $DESTINATION_TENANT_ID $DESTINATION_ACCOUNT_ID
done

# Updating all the table for ai_trainer db
for TableName in ${TrainerDBTableNames[*]} 
do
update_database_table  $TableName $SRC_SERVER $SRC_TRAINER_DB_NAME $SRC_TRAINER_DB_SCHEMA $SRC_TRAINER_DB_USERNAME $SRC_TRAINER_DB_PASSWORD $DESTINATION_SERVER $DESTINATION_DB_NAME $DESTINATION_TRAINER_DB_SCHEMA $DESTINATION_DB_USERNAME $DESTINATION_DB_PASSWORD $SRC_TENANT_ID $DESTINATION_TENANT_ID $DESTINATION_ACCOUNT_ID
done


# update cloned packages source package id , source package version ids

sqlcmd -v DestinationDBSchema=$DESTINATION_PKGMANAGER_DB_SCHEMA -S $DESTINATION_SERVER -U $DESTINATION_DB_USERNAME -P $DESTINATION_DB_PASSWORD -d $DESTINATION_DB_NAME -i UpdateClonedPackageReferences.sql